services:
  adminer:
    image: adminer
    restart: always
    ports:
      - 8085:8080
    networks:
      - rococo-network
  rococo-db:
    container_name: rococo-db
    image: postgres:15.1
    environment:
      - CREATE_DATABASES=rococo-auth,rococo-users,rococo-artists,rococo-museums,rococo-paintings,rococo-geos
      - PGUSER=postgres
      - POSTGRES_PASSWORD=secret
      - TZ=GMT+3
      - PGTZ=GMT+3
    volumes:
       - ./postgres:/docker-entrypoint-initdb.d
    #   - ./postgres/conf/postgresql.conf:/etc/postgresql.conf
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres", "-d", "postgres"]
      interval: 3s
      timeout: 3s
      retries: 5
    ports:
      - 5432:5432
    networks:
      - rococo-network

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.3.2
    ports:
      - 2181:2181
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    networks:
      - rococo-network

  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:7.3.2
    ports:
      - 9092:9092
    depends_on:
      zookeeper:
        condition: service_started
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
    networks:
      - rococo-network

  gateway:
    container_name: rococo.backends.gateway
    image: rococo-gateway:0.0.1
    ports:
      - 8080:8080
    restart: always
    depends_on:
      rococo-db:
        condition: service_healthy
    networks:
      - rococo-network

  front:
    container_name: front
    build: ./rococo-client
    ports:
      - 3000:3000
    depends_on:
      gateway:
        condition: service_started
    networks:
      - rococo-network

  auth:
    container_name: rococo.backends.auth
    image: rococo-auth:2.0.1
    ports:
      - 9000:9000
    restart: always
    depends_on:
      kafka:
        condition: service_started
      rococo-db:
        condition: service_healthy
    networks:
      - rococo-network

  userdata:
    container_name: rococo.backends.userdata
    image: rococo-userdata:0.0.1
    ports:
      - 8089:8089
    restart: always
    depends_on:
      auth:
        condition: service_started
      rococo-db:
        condition: service_healthy
    networks:
      - rococo-network

  artists:
    container_name: rococo.backends.artists
    image: rococo-artists:0.0.1
    ports:
      - 50001:50001
    restart: always
    depends_on:
      rococo-db:
        condition: service_healthy
    networks:
      - rococo-network

  museums:
    container_name: rococo.backends.museums
    image: rococo-museums:0.0.1
    ports:
      - 50002:50002
    restart: always
    depends_on:
      rococo-db:
        condition: service_healthy
    networks:
      - rococo-network

  paintings:
    container_name: rococo.backends.paintings
    image: rococo-paintings:0.0.1
    ports:
      - 50003:50003
    restart: always
    depends_on:
      rococo-db:
        condition: service_healthy
    networks:
      - rococo-network

  geos:
    container_name: rococo.backends.geos
    image: rococo-geos:0.0.1
    ports:
      - 50004:50004
    restart: always
    depends_on:
      rococo-db:
        condition: service_healthy
    networks:
      - rococo-network

  # selenoid:
  #   profiles:
  #     - test
  #   container_name: selenoid
  #   image: aerokube/selenoid:1.11.3
  #   platform: linux/${ARCH}
  #   volumes:
  #     - ./selenoid:/etc/selenoid
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - TZ=Europe/Moscow
  #   restart: unless-stopped
  #   command: [ "-conf", "/etc/selenoid/browsers.json", "-limit", "3", "-video-output-dir", "/opt/selenoid/video", "-log-output-dir", "/opt/selenoid/logs", "-container-network", "rococo_rococo-network" ]
  #   ports:
  #     - 4444:4444
  #   networks:
  #     - rococo-network
  #
  # selenoid-ui:
  #   profiles:
  #     - test
  #   container_name: selenoid-ui
  #   image: aerokube/selenoid-ui:1.10.11
  #   depends_on:
  #     - selenoid
  #   restart: unless-stopped
  #   ports:
  #     - 9091:8080
  #   command: [ "--selenoid-uri", "http://selenoid:4444" ]
  #   networks:
  #     - rococo-network
  #
  # rococo-e-2-e:
  #   profiles: [ test ]
  #   container_name: rococo-e-2-e
  #   image: ${PREFIX}/rococo-e-2-e-tests:latest
  #   build:
  #     context: ./
  #     dockerfile: ./rococo-e-2-e-tests/Dockerfile
  #   environment:
  #     - ALLURE_DOCKER_API=${ALLURE_DOCKER_API}
  #     - GITHUB_TOKEN=${GITHUB_TOKEN}
  #     - BUILD_URL=${BUILD_URL}
  #     - HEAD_COMMIT_MESSAGE=${HEAD_COMMIT_MESSAGE}
  #     - EXECUTION_TYPE=${EXECUTION_TYPE}
  #   depends_on:
  #     frontend.rococo.dc:
  #       condition: service_started
  #   networks:
  #     - rococo-network
  #
  # allure:
  #   profiles: [ test ]
  #   container_name: allure
  #   image: frankescobar/allure-docker-service:2.27.0
  #   depends_on:
  #     - rococo-e-2-e
  #   environment:
  #     - CHECK_RESULTS_EVERY_SECONDS=NONE
  #     - KEEP_HISTORY=1
  #   ports:
  #     - 5050:5050
  #   networks:
  #     - rococo-network
  #
  # allure-ui:
  #   profiles: [ test ]
  #   container_name: allure-ui
  #   image: frankescobar/allure-docker-service-ui:7.0.3
  #   depends_on:
  #     - allure
  #   environment:
  #     - ALLURE_DOCKER_PUBLIC_API_URL=http://localhost:5050
  #   ports:
  #     - 5252:5252
  #   networks:
  #     - rococo-network

networks:
  rococo-network:
    driver: bridge
