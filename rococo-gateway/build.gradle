plugins {
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'com.google.protobuf' version '0.8.18'
	id 'com.google.cloud.tools.jib' version '3.4.1'
}

group = 'rococo.gateway'
version = '0.0.1'

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'io.grpc:grpc-netty-shaded:1.44.0'
	implementation 'io.grpc:grpc-protobuf:1.44.0'
	implementation 'io.grpc:grpc-stub:1.44.0'
	implementation 'io.grpc:protoc-gen-grpc-java:1.44.0'
	implementation 'com.google.protobuf:protobuf-java-util:3.21.12'
	implementation 'javax.annotation:javax.annotation-api:1.3.2'
	implementation 'org.springframework.data:spring-data-commons'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-oauth2-resource-server'
	implementation 'org.springframework.security:spring-security-oauth2-jose'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:3.17.3"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:1.44.0"
		}
	}
	generateProtoTasks {
		all().each { task ->
			task.builtins {
				java {}
			}
			task.plugins {
				grpc {}
			}
		}
	}
}

sourceSets {
	main {
		proto {
			srcDir '../shared/proto'
		}
	}
}

sourceSets {
	main {
		java.srcDirs("$projectDir/src/main/java", "$projectDir/build/generated/source/proto/main/grpc",
				"$projectDir/build/generated/source/proto/main/java")
	}
}

jib {
	container {
		ports = ['50004']
		jvmFlags = ["-Dspring.profiles.active=docker"]
		environment = [
				'VAULT_TOKEN': "${System.env.VAULT_TOKEN}".toString(),
				'TZ'         : 'Europe/Moscow'
		]
		creationTime = 'USE_CURRENT_TIMESTAMP'
		labels = [
				'maintainer': 'Kazantsev Ivan @IvanKazncev',
				'version'   : "${project.version}".toString()
		]
	}
	from {
		image = "${project.ext.dockerImage}"
		platforms {
			platform {
				architecture = "${project.ext.dockerArch}"
				os = 'linux'
			}
		}
	}
}

tasks.jib.dependsOn test
tasks.jibDockerBuild.dependsOn test

tasks.named('test') {
	useJUnitPlatform()
}
